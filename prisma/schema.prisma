// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Meetings {
  id        String     @id @default(cuid())
  type      String?
  title     String
  body      String
  author    User?      @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now())
  userId    String
  image     String?
  Comments  Comments[]
  Likes     Likes[]
}

model Comments {
  id        String    @id @default(cuid())
  meeting   Meetings? @relation(fields: [meetingId], references: [id])
  mural     Mural?    @relation(fields: [muralId], references: [id])
  author    User      @relation(fields: [userId], references: [id])
  content   String
  createdAt DateTime  @default(now())
  meetingId String?
  userId    String
  muralId   String?
}

model Likes {
  id        String    @id @default(cuid())
  meeting   Meetings? @relation(fields: [meetingId], references: [id])
  mural     Mural?    @relation(fields: [muralId], references: [id])
  userId    User      @relation(fields: [author], references: [id])
  createdAt DateTime  @default(now())
  meetingId String?
  author    String
  muralId   String?
}

model Mural {
  id        String     @id @default(cuid())
  body      String
  author    User       @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now())
  userId    String
  image     String?
  comments  Comments[]
  likes     Likes[]
}

model User {
  id                       String    @id @default(cuid())
  imageProfile             String?
  name                     String
  email                    String    @unique
  password                 String
  token                    String?
  emailConfirmationToken   String?   @unique
  emailConfirmationExpires DateTime?
  emailConfirmed           Boolean   @default(false)

  sentRequests     Friendship[] @relation(name: "Requester")
  receivedRequests Friendship[] @relation(name: "Addressed")

  sentMessages     Message[] @relation(name: "Sender")
  receivedMessages Message[] @relation(name: "Recipient")

  initiatedChats Chat[]       @relation(name: "ChatToInitiator")
  receivedChats  Chat[]       @relation(name: "ChatToParticipant")
  Meetings       Meetings[]
  Comments       Comments[]
  Likes          Likes[]
  Mural          Mural[]
  blockerUsers   UserBlocks[] @relation(name: "Blocker")
  blockedByUsers UserBlocks[] @relation(name: "Blocked")
}

model UserBlocks {
  id        String @id @default(cuid())
  blockerId String
  blockedId String

  blocker User @relation(name: "Blocker", fields: [blockerId], references: [id])
  blocked User @relation(name: "Blocked", fields: [blockedId], references: [id])
}

model Friendship {
  id          String   @id @default(cuid())
  requester   User     @relation(name: "Requester", fields: [requesterId], references: [id])
  addressed   User     @relation(name: "Addressed", fields: [addressedId], references: [id])
  status      String
  createdAt   DateTime @default(now())
  requesterId String
  addressedId String
}

//i need to implement this system
model Visitor {
  id   String @id @default(cuid())
  name String
}

model Message {
  id          String @id @default(cuid())
  content     String
  senderId    String
  sender      User   @relation(fields: [senderId], references: [id], name: "Sender")
  recipientId String
  recipient   User   @relation(fields: [recipientId], references: [id], name: "Recipient")
  chatId      String
  Chat        Chat   @relation(fields: [chatId], references: [id])
}

model Chat {
  id            String    @id @default(cuid())
  initiatorId   String
  initiator     User      @relation(fields: [initiatorId], references: [id], name: "ChatToInitiator")
  participantId String
  participant   User      @relation(fields: [participantId], references: [id], name: "ChatToParticipant")
  messages      Message[]
}

generator erd {
  provider = "prisma-erd-generator"
}
