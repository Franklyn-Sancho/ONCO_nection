// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_PG")
}

model Meetings {
  id        String     @id @default(cuid())
  type      String?
  title     String
  body      String
  author    User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  userId    String
  image     String?
  Comments  Comments[] 
  Likes     Likes[] 
}

model Comments {
  id        String    @id @default(cuid())
  meeting   Meetings? @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  mural     Mural?    @relation(fields: [muralId], references: [id], onDelete: Cascade)
  author    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String
  createdAt DateTime  @default(now())
  meetingId String?
  userId    String
  muralId   String?
}

model Likes {
  id        String    @id @default(cuid())
  meeting   Meetings? @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  mural     Mural?    @relation(fields: [muralId], references: [id], onDelete: Cascade)
  userId    User      @relation(fields: [author], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  meetingId String?
  author    String
  muralId   String?
}

model Mural {
  id        String     @id @default(cuid())
  body      String
  author    User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  userId    String
  image     String?
  comments  Comments[]
  likes     Likes[]
}

model User {
  id          String  @id @default(cuid())
  name        String
  email       String  @unique
  description String?
  imageProfile String?
  token                    String?
  emailConfirmationToken   String?   @unique
  emailConfirmationExpires DateTime?
  emailConfirmed           Boolean   @default(false)
  
  createdAt   DateTime @default(now())
  
  // Novos campos para gerenciamento de conta
  isDeactivated     Boolean  @default(false)
  deleteScheduledAt DateTime?
  
  // Relacionamento com a entidade de autenticação
  authentications Authentication[]

  // Outras entidades relacionadas ao usuário
  sentRequests     Friendship[] @relation(name: "Requester")
  receivedRequests Friendship[] @relation(name: "Addressed")

  sentMessages     Message[] @relation(name: "Sender")
  receivedMessages Message[] @relation(name: "Recipient")

  initiatedChats Chat[]       @relation(name: "ChatToInitiator")
  receivedChats  Chat[]       @relation(name: "ChatToParticipant")
  Meetings       Meetings[]
  Comments       Comments[]
  Likes          Likes[]
  Mural          Mural[]
  blockerUsers   UserBlocks[] @relation(name: "Blocker")
  blockedByUsers UserBlocks[] @relation(name: "Blocked")
}

model Authentication {
  id           String @id @default(cuid())
  userId       String
  provider     String
  password     String?
  providerId   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
}

model TokenBlacklist {
  id           String @id @default(cuid())
  token       String   @unique
  blacklistedAt DateTime @default(now())
}


model EmailQueue {
  id        Int      @id @default(autoincrement())
  fromEmail String
  toEmail   String
  subject   String
  text      String
  createdAt DateTime @default(now())
  sent      Boolean  @default(false)
}

model UserBlocks {
  id        String @id @default(cuid())
  blockerId String
  blockedId String

  blocker User @relation(name: "Blocker", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation(name: "Blocked", fields: [blockedId], references: [id], onDelete: Cascade)
}

model Friendship {
  id          String   @id @default(cuid())
  requester   User     @relation(name: "Requester", fields: [requesterId], references: [id], onDelete: Cascade)
  addressed   User     @relation(name: "Addressed", fields: [addressedId], references: [id], onDelete: Cascade)
  status      String
  createdAt   DateTime @default(now())
  requesterId String
  addressedId String
}

//i need to implement this system
model Visitor {
  id   String @id @default(cuid())
  name String
}

model Message {
  id          String @id @default(cuid())
  content     String
  senderId    String
  sender      User   @relation(fields: [senderId], references: [id], name: "Sender", onDelete: Cascade)
  recipientId String
  recipient   User   @relation(fields: [recipientId], references: [id], name: "Recipient", onDelete: Cascade)
  chatId      String
  Chat        Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model Chat {
  id            String    @id @default(cuid())
  initiatorId   String
  initiator     User      @relation(fields: [initiatorId], references: [id], name: "ChatToInitiator", onDelete: Cascade)
  participantId String
  participant   User      @relation(fields: [participantId], references: [id], name: "ChatToParticipant", onDelete: Cascade)
  messages      Message[]
}

generator erd {
  provider = "prisma-erd-generator"
}
